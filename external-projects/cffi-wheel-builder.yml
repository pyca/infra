trigger: none
pr: none

jobs:
    - job: 'macOS'
      pool:
          vmImage: 'macOS-10.14'
      strategy:
          matrix:
              Python27:
                  python.version: '2.7'
                  PYTHON_DOWNLOAD_URL: "https://www.python.org/ftp/python/2.7.16/python-2.7.16-macosx10.6.pkg"
                  PYTHON_BIN_PATH: /Library/Frameworks/Python.framework/Versions/2.7/bin/python
              Python3:
                  python.version: '3.4'
                  PYTHON_DOWNLOAD_URL: "https://www.python.org/ftp/python/3.7.3/python-3.7.3-macosx10.6.pkg"
                  PYTHON_BIN_PATH: /Library/Frameworks/Python.framework/Versions/3.7/bin/python3
      steps:
          - script: |
              set -e
              set -x
              curl "$PYTHON_DOWNLOAD_URL" -o python.pkg
              sudo installer -pkg python.pkg -target /
            displayName: Download and install Python
          - script: $PYTHON_BIN_PATH -m pip install -U virtualenv
            displayName: Install virtualenv
          - script: $PYTHON_BIN_PATH -m virtualenv .venv
            displayName: Create virtualenv
          - script: .venv/bin/pip install -U wheel
            displayName: Update wheel to the latest version
          - script: .venv/bin/pip install cffi six asn1crypto ipaddress "enum34; python_version < '3'"
            displayName: Install our Python dependencies

          - script: |
              set -e
              set -x
              .venv/bin/pip install -U wheel # upgrade wheel to latest before we use it to build the wheel
            displayName: Build the wheel
          - script: .venv/bin/pip install --no-index -f wheelhouse cffi
            displayName: Test installing the wheel
          - script: |
              .venv/bin/python -c "import cffi;print(cffi.__version__)"
            displayName: Print the cffi version
          - task: PublishBuildArtifacts@1
            inputs:
                pathToPublish: wheelhouse/
                artifactName: cffi-macos-python$(python.version)

    - job: 'manylinux1'
      pool:
          vmImage: 'ubuntu-16.04'
      container: 'quay.io/pypa/manylinux1_x86_64'
      strategy:
          matrix:
              Python27m:
                  PYTHON_VERSION: 'cp27-cp27m'
              Python27mu:
                  PYTHON_VERSION: 'cp27-cp27mu'
              Python34m:
                  PYTHON_VERSION: 'cp34-cp34m'
              Python35m:
                  PYTHON_VERSION: 'cp35-cp35m'
              Python36m:
                  PYTHON_VERSION: 'cp36-cp36m'
              Python37m:
                  PYTHON_VERSION: 'cp37-cp37m'
      steps:
          - script: /opt/python/$PYTHON_VERSION/bin/pip install pycparser
            displayName: Install our Python dependencies
          - script: |
              set -e
              set -x
              LIBFFI_SHA256="d06ebb8e1d9a22d19e38d63fdb83954253f39bedc5d46232a05645685722ca37"
              LIBFFI_VERSION="3.2.1"

              function check_sha256sum {
                  local fname=$1
                  local sha256=$2
                  echo "${sha256}  ${fname}" > ${fname}.sha256
                  sha256sum -c ${fname}.sha256
              }

              curl -#O https://mirrors.ocf.berkeley.edu/debian/pool/main/libf/libffi/libffi_${LIBFFI_VERSION}.orig.tar.gz
              check_sha256sum libffi_${LIBFFI_VERSION}.orig.tar.gz ${LIBFFI_SHA256}
              tar zxf libffi_${LIBFFI_VERSION}.orig.tar.gz
              pushd libffi-${LIBFFI_VERSION}
              # CFLAGS needed to override the Makefile and prevent -march optimization
              # This flag set taken from Ubuntu 14.04's defaults. We should update it
              # to use -fstack-protector-strong if/when gcc 4.9+ is added to the
              # manylinux1 images.
              ./configure CFLAGS="-g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security"
              make install
              popd
            displayName: Compile libffi
          - script: |
              set -e
              set -x
              /opt/python/$PYTHON_VERSION/bin/pip wheel --no-binary cffi --no-deps cffi -w tmpwheelhouse/
            displayName: Build the wheel
          - script: auditwheel repair tmpwheelhouse/cffi*.whl -w wheelhouse/
            displayName: Run auditwheel
          - script: /opt/python/$PYTHON_VESRION/bin/pip install cffi --no-index -f wheelhouse/
            displayName: Test installing the wheel
          - script: |
              /opt/python/$PYTHON_VERSION/bin/python -c "import cffi;print(cffi.__version__)"
            displayName: Print the cffi version
          - task: PublishBuildArtifacts@1
            inputs:
                pathToPublish: wheelhouse/
                artifactName: cffi-manylinux1-$(PYTHON_VERSION)

    - job: 'windows'
      pool:
          vmImage: 'windows-2019'
      container: $[variables.containerImage]
      strategy:
          matrix:
              Python27-x86:
                  containerImage: 'pyca/cryptography-runner-windows:py27-x86'
                  PYTHON_VERSION: '27'
                  WINDOWS_ARCH: 'x86'
              Python27-x86-64:
                  containerImage: 'pyca/cryptography-runner-windows:py27-x86_64'
                  PYTHON_VERSION: '27'
                  WINDOWS_ARCH: 'x86_64'
              Python34-x86:
                  containerImage: 'pyca/cryptography-runner-windows:py34-x86'
                  PYTHON_VERSION: '34'
                  WINDOWS_ARCH: 'x86'
              Python34-x86-64:
                  containerImage: 'pyca/cryptography-runner-windows:py34-x86_64'
                  PYTHON_VERSION: '34'
                  WINDOWS_ARCH: 'x86_64'
              Python35-x86:
                  containerImage: 'pyca/cryptography-runner-windows:py35-x86'
                  PYTHON_VERSION: '35'
                  WINDOWS_ARCH: 'x86'
              Python35-x86-64:
                  containerImage: 'pyca/cryptography-runner-windows:py35-x86_64'
                  PYTHON_VERSION: '35'
                  WINDOWS_ARCH: 'x86_64'
              Python36-x86:
                  containerImage: 'pyca/cryptography-runner-windows:py3-x86'
                  PYTHON_VERSION: '36'
                  WINDOWS_ARCH: 'x86'
              Python36-x86-64:
                  containerImage: 'pyca/cryptography-runner-windows:py3-x86_64'
                  PYTHON_VERSION: '36'
                  WINDOWS_ARCH: 'x86_64'
              Python37-x86:
                  containerImage: 'pyca/cryptography-runner-windows:py3-x86'
                  PYTHON_VERSION: '37'
                  WINDOWS_ARCH: 'x86'
              Python37-x86-64:
                  containerImage: 'pyca/cryptography-runner-windows:py3-x86_64'
                  PYTHON_VERSION: '37'
                  WINDOWS_ARCH: 'x86_64'
      steps:
          - script: '"C:/Python%PYTHON_VERSION%/Scripts/pip" install pycparser wheel'
            displayName: Install wheel and our Python dependencies
          - script: |
                    C:/Python%PYTHON_VERSION%/Scripts/pip wheel cffi --wheel-dir=wheelhouse --no-binary cffi
            displayName: Build the wheel
          - script: '"C:/Python%PYTHON_VERSION%/Scripts/pip" install -f wheelhouse cffi --no-index'
            displayName: Test installing the wheel
          - script: |
              "C:/Python%PYTHON_VERSION%/python" -c "import cffi;print(cffi.__version__)"
            displayName: Print the cffi version
          - script: mkdir cffi-wheelhouse
            displayName: Create a directory for placing the final wheel in
          - script: move wheelhouse\cffi*.whl cffi-wheelhouse\
            displayName: Move the cffi wheel into the final wheel house
          - task: PublishBuildArtifacts@1
            inputs:
                pathToPublish: cffi-wheelhouse/
                artifactName: cffi-windows-$(WINDOWS_ARCH)-python$(PYTHON_VERSION)
