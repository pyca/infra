trigger:
    - master

jobs:
    - job: 'linux'
      pool:
          vmImage: 'ubuntu-16.04'
      strategy:
          matrix:
              caddy:
                  DOCKER_TAG_NAME: pyca/caddy
                  DOCKERFILE_PATH: caddy
                  DOCKER_BUILD_ARGS: ""
              cryptography-runner-centos7:
                  DOCKER_TAG_NAME: pyca/cryptography-runner-centos7
                  DOCKERFILE_PATH: runners/centos7
                  DOCKER_BUILD_ARGS: ""
              cryptography-runner-fedora:
                  DOCKER_TAG_NAME: pyca/cryptography-runner-fedora
                  DOCKERFILE_PATH: runners/fedora
                  DOCKER_BUILD_ARGS: ""
              cryptography-runner-jessie:
                  DOCKER_TAG_NAME: pyca/cryptography-runner-jessie
                  DOCKERFILE_PATH: runners/debian
                  DOCKER_BUILD_ARGS: "--build-arg RELEASE=jessie"
              cryptography-runner-stretch:
                  DOCKER_TAG_NAME: pyca/cryptography-runner-stretch
                  DOCKERFILE_PATH: runners/debian
                  DOCKER_BUILD_ARGS: "--build-arg RELEASE=stretch"
              cryptography-runner-buster:
                  DOCKER_TAG_NAME: pyca/cryptography-runner-buster
                  DOCKERFILE_PATH: runners/debian
                  DOCKER_BUILD_ARGS: "--build-arg RELEASE=buster"
              cryptography-runner-bullseye:
                  DOCKER_TAG_NAME: pyca/cryptography-runner-bullseye
                  DOCKERFILE_PATH: runners/debian
                  DOCKER_BUILD_ARGS: "--build-arg RELEASE=bullseye"
              cryptography-runner-sid:
                  DOCKER_TAG_NAME: pyca/cryptography-runner-sid
                  DOCKERFILE_PATH: runners/debian
                  DOCKER_BUILD_ARGS: "--build-arg RELEASE=sid"
              cryptography-runner-ubuntu-trusty:
                  DOCKER_TAG_NAME: pyca/cryptography-runner-ubuntu-trusty
                  DOCKERFILE_PATH: runners/ubuntu
                  DOCKER_BUILD_ARGS: "--build-arg RELEASE=trusty"
              cryptography-runner-ubuntu-xenial:
                  DOCKER_TAG_NAME: pyca/cryptography-runner-ubuntu-xenial
                  DOCKERFILE_PATH: runners/ubuntu
                  DOCKER_BUILD_ARGS: "--build-arg RELEASE=xenial"
              cryptography-runner-ubuntu-rolling:
                  DOCKER_TAG_NAME: pyca/cryptography-runner-ubuntu-rolling
                  DOCKERFILE_PATH: runners/ubuntu
                  DOCKER_BUILD_ARGS: "--build-arg RELEASE=rolling"
              cryptography-runner-alpine:
                  DOCKER_TAG_NAME: pyca/cryptography-runner-alpine
                  DOCKERFILE_PATH: runners/alpine
                  DOCKER_BUILD_ARGS: ""
              cryptography-manylinux1:
                  DOCKER_TAG_NAME: pyca/cryptography-manylinux1:x86_64
                  DOCKERFILE_PATH: cryptography-manylinux
                  DOCKER_BUILD_ARGS: "-f cryptography-manylinux/Dockerfile-manylinux1"
              cryptography-manylinux2010:
                  DOCKER_TAG_NAME: pyca/cryptography-manylinux2010:x86_64
                  DOCKERFILE_PATH: cryptography-manylinux
                  DOCKER_BUILD_ARGS: "-f cryptography-manylinux/Dockerfile-manylinux2010"
      steps:
          # Pull the previous image, but if it fails return true anyway.
          # Sometimes we add new docker images and if they've never been pushed they can't
          # be pulled.
          - script: "docker pull $DOCKER_TAG_NAME || true"
            displayName: Pull the previous image

          - script: "docker build --pull --cache-from $DOCKER_TAG_NAME -t $DOCKER_TAG_NAME $DOCKERFILE_PATH $DOCKER_BUILD_ARGS"
            displayName: Build docker image

          - script: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
            displayName: Log in to docker
            condition: and(eq(variables['Build.SourceBranch'], 'refs/heads/master'), ne(variables['Build.Reason'], 'PullRequest'))
            env:
                DOCKER_USERNAME: $(DOCKER_USERNAME)
                DOCKER_PASSWORD: $(DOCKER_PASSWORD)
          - script: "docker push $DOCKER_TAG_NAME"
            displayName: Push docker image
            condition: and(eq(variables['Build.SourceBranch'], 'refs/heads/master'), ne(variables['Build.Reason'], 'PullRequest'))
    - job: 'windows'
      pool:
          vmImage: 'windows-2019'
      strategy:
          matrix:
              py27-x86-64:
                  DOCKER_TAG_NAME: pyca/cryptography-runner-windows:py27-x86_64
                  DOCKERFILE_PATH: windows/py27
                  DOCKER_BUILD_ARGS: "--build-arg CPU_ARCH=x86_64"
              py27-x86:
                  DOCKER_TAG_NAME: pyca/cryptography-runner-windows:py27-x86
                  DOCKERFILE_PATH: windows/py27
                  DOCKER_BUILD_ARGS: "--build-arg CPU_ARCH=x86"
              py34-x86-64:
                  DOCKER_TAG_NAME: pyca/cryptography-runner-windows:py34-x86_64
                  DOCKERFILE_PATH: windows/py34
                  DOCKER_BUILD_ARGS: "--build-arg CPU_ARCH=x86_64"
              py34-x86:
                  DOCKER_TAG_NAME: pyca/cryptography-runner-windows:py34-x86
                  DOCKERFILE_PATH: windows/py34
                  DOCKER_BUILD_ARGS: "--build-arg CPU_ARCH=x86"
              py35-x86-64:
                  DOCKER_TAG_NAME: pyca/cryptography-runner-windows:py35-x86_64
                  DOCKERFILE_PATH: windows/py35
                  DOCKER_BUILD_ARGS: "--build-arg CPU_ARCH=x86_64"
              py35-x86:
                  DOCKER_TAG_NAME: pyca/cryptography-runner-windows:py35-x86
                  DOCKERFILE_PATH: windows/py35
                  DOCKER_BUILD_ARGS: "--build-arg CPU_ARCH=x86"
              py3-x86-64:
                  DOCKER_TAG_NAME: pyca/cryptography-runner-windows:py3-x86_64
                  DOCKERFILE_PATH: windows/py3
                  DOCKER_BUILD_ARGS: "--build-arg CPU_ARCH=x86_64"
              py3-x86:
                  DOCKER_TAG_NAME: pyca/cryptography-runner-windows:py3-x86
                  DOCKERFILE_PATH: windows/py3
                  DOCKER_BUILD_ARGS: "--build-arg CPU_ARCH=x86"
      steps:
          - powershell: "get-psdrive -psprovider filesystem"
            displayName: Show free space just in case

          - script: "docker build --pull --cache-from %DOCKER_TAG_NAME% -t %DOCKER_TAG_NAME% %DOCKERFILE_PATH% %DOCKER_BUILD_ARGS%"
            displayName: Build docker image

          - script: "docker login -u %DOCKER_USERNAME% -p %DOCKER_PASSWORD%"
            displayName: Log in to docker
            condition: and(eq(variables['Build.SourceBranch'], 'refs/heads/master'), ne(variables['Build.Reason'], 'PullRequest'))
            env:
                DOCKER_USERNAME: $(DOCKER_USERNAME)
                DOCKER_PASSWORD: $(DOCKER_PASSWORD)
          - script: "docker push %DOCKER_TAG_NAME%"
            displayName: Push docker image
            condition: and(eq(variables['Build.SourceBranch'], 'refs/heads/master'), ne(variables['Build.Reason'], 'PullRequest'))
